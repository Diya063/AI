Practical 1:
Write a PROLOG program to implement the family tree and demonstrate the family relationship.

% Facts
male(john).
male(peter).
male(sam).
female(mary).
female(lisa).
female(anna).

parent(john, peter).
parent(john, mary).
parent(peter, sam).
parent(mary, lisa).
parent(mary, anna).

% Rules
father(X, Y) :- male(X), parent(X, Y).
mother(X, Y) :- female(X), parent(X, Y).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

% Sample Queries:
% ?- father(john, peter).
% ?- sibling(peter, mary).
% ?- grandparent(john, sam).


Practical 2:
Write a PROLOG program to implement conc(L1, L2, L3) where L2 is the list to be appended with L1 to get the resulted list L3.

% Program to concatenate two lists
conc([], L, L).
conc([H|T], L2, [H|R]) :- conc(T, L2, R).

% Sample Query:
% ?- conc([1, 2], [3, 4], R).
% R = [1, 2, 3, 4].


Practical 3:
Write a PROLOG program to implement reverse(L, R) where List L is original and List R is reversed list.

% Program to reverse a list
reverse([], []).
reverse([H|T], R) :- reverse(T, RevT), append(RevT, [H], R).

% Sample Query:
% ?- reverse([1, 2, 3], R).
% R = [3, 2, 1].


Practical 4:
Write a PROLOG program to calculate the sum of two numbers.

% Program to calculate the sum of two numbers

sum(X, Y, Z) :- Z is X + Y.

% Sample Query:
% ?- sum(5, 3, Result).
% Result = 8.


Practical 5:
Write a PROLOG program to implement max(X, Y, M) so that M is the maximum of two numbers X and Y.

% Program to find the maximum of two numbers
max(X, Y, X) :- X >= Y.
max(X, Y, Y) :- Y > X.
% Sample Query:
% ?- max(10, 20, Result).
% Result = 20.


Practical 6:
Write a program in PROLOG to implement factorial (N, F) where F represents the factorial of a number N.

% Program to calculate factorial of a number
factorial(0, 1).
factorial(N, F) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    F is N * F1.
% Sample Query:
% ?- factorial(5, Result).
% Result = 120.

Practical 7:
Write a program in PROLOG to implement generate_fib(N,T) where T represents the Nth term of the Fibonacci series.

% Program to find Nth term in Fibonacci series
fib(0, 0).
fib(1, 1).
fib(N, F) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fib(N1, F1),
    fib(N2, F2),
    F is F1 + F2.
% Sample Query:
% ?- fib(6, Result).
% Result = 8.

Practical 8:
Write a PROLOG program to implement power (Num, Pow, Ans): where Num is raised to the power Pow to get Ans.

% Program to calculate power of a number
power(_, 0, 1).
power(Num, Pow, Ans) :-
    Pow > 0,
 
   Pow1 is Pow - 1,
    power(Num, Pow1, Ans1),
   
   Ans is Num * Ans1.

% Sample Query:
% ?- power(2, 3, Result).
% Result = 8.

Practical 9:
PROLOG program to implement multi (NI, N2, R): where N1 and N2 denotes the numbers to be multiplied and R represents the result.

% Program to multiply two numbers
multi(N1, N2, R) :- R is N1 * N2.

% Sample Query:
% ?- multi(4, 5, Result).
% Result = 20.

Practical 10:
Write a PROLOG program to implement memb(X, L): to check whether X is a member of L or not.

% Program to check whether X is a member of list L

memb(X, [X|_]).
memb(X, [_|T]) :- memb(X, T).

% Sample Query:
% ?- memb(3, [1, 2, 3, 4]).
% true.

Practical 11:
Write a PROLOG program to implement sumlist(L, S) so that S is the sum of a given list L.

% Program to find the sum of elements in a list

sumlist([], 0).
sumlist([H|T], S) :-
    sumlist(T, Rest),
    S is H + Rest.

% Sample Query:
% ?- sumlist([1, 2, 3, 4], Result).
% Result = 10.


Practical 12:
Write a PROLOG program to implement two predicates evenlength(List) and oddlength(List) so that they are true if their argument is a list of even or odd length respectively.

% Program to check if a list has even or odd length

evenlength([]).
evenlength([_,_|T]) :- evenlength(T).
oddlength([_]).
oddlength([_,_|T]) :- oddlength(T).

% Sample Queries:
% ?- evenlength([1, 2, 3, 4]).
% true.
% ?- oddlength([1, 2, 3]).
% true.

Practical 13:
Write a PROLOG program to implement maxlist(L, M) so that M is the maximum number in the list.

% Program to find the maximum element in a list
maxlist([X], X).
maxlist([H|T], M) :-
   
 maxlist(T, M1),
    M is max(H, M1).

% Sample Query:
% ?- maxlist([4, 9, 1, 7], Result).
% Result = 9.

Practical 14:
Write a PROLOG program to implement insert(I, N, L, R) that inserts an item I into Nth position of list L. to generate a list R.

% Program to insert an element I at Nth position in list L to get list R

insert(I, 1, L, [I|L]).
insert(I, N, [H|T], [H|R]) :-
    N > 1,
    N1 is N - 1,
    insert(I, N1, T, R).

% Sample Query:
% ?- insert(99, 3, [1, 2, 3, 4], Result).
% Result = [1, 2, 99, 3, 4].


Practical 15:
Write a PROLOG program to implement delete(N, L, R) that removes the element on Nth position from a list L. to generate a list R.

% Program to delete the element at Nth position from list L to get list R

delete(1, [_|T], T).
delete(N, [H|T], [H|R]) :-
    N > 1,
    N1 is N - 1,
    delete(N1, T, R).

% Sample Query:
% ?- delete(2, [10, 20, 30, 40], Result).
% Result = [10, 30, 40].










